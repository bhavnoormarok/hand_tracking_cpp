#include<Reg.h>

void calculate_bone_lengths(Eigen::MatrixX3d& k, Eigen::VectorXd& x){
        Eigen::MatrixX3d temp = k;
        k.row(0);
        temp(Eigen::seq(4,20,4), Eigen::placeholders::all).rowwise() = k.row(0);
    
        Eigen::MatrixX3d y = k(Eigen::seq(1,20),Eigen::placeholders::all) - temp(Eigen::seq(0,19), Eigen::placeholders::all);
        
        x.resize(20);
        x = y.rowwise().norm();
}


Eigen::MatrixX3d mat_rotate(Eigen::MatrixXd &Q, Eigen::MatrixX3d &v){
    Eigen::ArrayX3d a_row1 = Q(Eigen::placeholders::all,Eigen::seq(0,2,1));
    Eigen::ArrayX3d a_row2 = Q(Eigen::placeholders::all,Eigen::seq(3,5,1));
    Eigen::ArrayX3d a_row3 = Q(Eigen::placeholders::all,Eigen::seq(6,8,1));


    Eigen::MatrixX3d res(v.rows(),3);
    auto va = v.array();
    res.col(0) = (a_row1*va).rowwise().sum();
    res.col(1) = (a_row2*va).rowwise().sum();
    res.col(2) = (a_row3*va).rowwise().sum();

    return res;
}




    Eigen::MatrixXd compose_mat(Eigen::MatrixXd &Q1, Eigen::MatrixXd &Q2){
        Eigen::ArrayX3d a_row1 = Q1(Eigen::placeholders::all,Eigen::seq(0,2,1));
        Eigen::ArrayX3d a_row2 = Q1(Eigen::placeholders::all,Eigen::seq(3,5,1));
        Eigen::ArrayX3d a_row3 = Q1(Eigen::placeholders::all,Eigen::seq(6,8,1));

        Eigen::ArrayX3d b_col1 = Q2(Eigen::placeholders::all,Eigen::seq(0,8,3));
        Eigen::ArrayX3d b_col2 = Q2(Eigen::placeholders::all,Eigen::seq(1,8,3));
        Eigen::ArrayX3d b_col3 = Q2(Eigen::placeholders::all,Eigen::seq(2,8,3));

        Eigen::MatrixXd res(Q1.rows(),9);

       
        res.col(0) = a_row1.cwiseProduct(b_col1).rowwise().sum();
        res.col(1) = a_row1.cwiseProduct(b_col2).rowwise().sum();
        res.col(2) = a_row1.cwiseProduct(b_col3).rowwise().sum();
        res.col(3) = a_row2.cwiseProduct(b_col1).rowwise().sum();
        res.col(4) = a_row2.cwiseProduct(b_col2).rowwise().sum();
        res.col(5) = a_row2.cwiseProduct(b_col3).rowwise().sum();
        res.col(6) = a_row3.cwiseProduct(b_col1).rowwise().sum();
        res.col(7) = a_row3.cwiseProduct(b_col2).rowwise().sum();
        res.col(8) = a_row3.cwiseProduct(b_col3).rowwise().sum();

        return res;

    }



    void compose_mat(Eigen::Matrix3d &Q1, Eigen::MatrixXd &Q2, Eigen::MatrixXd& res){

        Eigen::Vector3d a_row1 = Q1.row(0);
        Eigen::Vector3d a_row2 = Q1.row(1);
        Eigen::Vector3d a_row3 = Q1.row(2);

        Eigen::MatrixX3d b_col1 = Q2(Eigen::placeholders::all,Eigen::seq(0,8,3));
        Eigen::MatrixX3d b_col2 = Q2(Eigen::placeholders::all,Eigen::seq(1,8,3));
        Eigen::MatrixX3d b_col3 = Q2(Eigen::placeholders::all,Eigen::seq(2,8,3));

        res.resize(Q2.rows(),9);
        // std::cout<<b_col1.rows()<<" "<<b_col1.cols()<<" "<<a_row1.rows()<<" "<<a_row1.cols()<<" "<<std::endl;
        // std::cout<<res.rows()<<" "<<res.cols()<<" "<<Q1.rows()<<" "<<Q1.cols()<<" "<<Q2.rows()<<" "<<Q2.cols()<<std::endl;
        res.col(0) = (b_col1 * a_row1);
        res.col(1) = (b_col2 * a_row1);
        res.col(2) = (b_col3 * a_row1);
        res.col(3) = (b_col1 * a_row2);
        res.col(4) = (b_col2 * a_row2);
        res.col(5) = (b_col3 * a_row2);
        res.col(6) = (b_col1 * a_row3);
        res.col(7) = (b_col2 * a_row3);
        res.col(8) = (b_col3 * a_row3);
    }




void compose_mat(Eigen::MatrixXd &Q1, Eigen::MatrixXd &Q2, Eigen::MatrixXd &res){
        Eigen::ArrayX3d a_row1 = Q1(Eigen::placeholders::all,Eigen::seq(0,2,1));
        Eigen::ArrayX3d a_row2 = Q1(Eigen::placeholders::all,Eigen::seq(3,5,1));
        Eigen::ArrayX3d a_row3 = Q1(Eigen::placeholders::all,Eigen::seq(6,8,1));

        Eigen::ArrayX3d b_col1 = Q2(Eigen::placeholders::all,Eigen::seq(0,8,3));
        Eigen::ArrayX3d b_col2 = Q2(Eigen::placeholders::all,Eigen::seq(1,8,3));
        Eigen::ArrayX3d b_col3 = Q2(Eigen::placeholders::all,Eigen::seq(2,8,3));

        res.resize(Q1.rows(),9);

       
        res.col(0) = a_row1.cwiseProduct(b_col1).rowwise().sum();
        res.col(1) = a_row1.cwiseProduct(b_col2).rowwise().sum();
        res.col(2) = a_row1.cwiseProduct(b_col3).rowwise().sum();
        res.col(3) = a_row2.cwiseProduct(b_col1).rowwise().sum();
        res.col(4) = a_row2.cwiseProduct(b_col2).rowwise().sum();
        res.col(5) = a_row2.cwiseProduct(b_col3).rowwise().sum();
        res.col(6) = a_row3.cwiseProduct(b_col1).rowwise().sum();
        res.col(7) = a_row3.cwiseProduct(b_col2).rowwise().sum();
        res.col(8) = a_row3.cwiseProduct(b_col3).rowwise().sum();
    }





void uvd2xyz(Eigen::MatrixX3d& U, Eigen::MatrixX3d& X, double& fx, double& fy, double& cx, double& cy){
    //u, v, d = np.hsplit(U, 3)   // hsplit: handles multiple points
    X.resize(U.rows(),3);
    X.col(2) = U.col(2);
    X.col(0) = (U.col(0).array() - cx) * U.col(2).array() / fx;
    X.col(1) = (U.col(1).array() - cy) * U.col(2).array() / fy;
    
    return;
}

void xyz2uv(Eigen::MatrixX3d& X, Eigen::MatrixX2d& U, double& fx, double& fy, double& cx, double& cy){
    //x, y, z = np.hsplit(X, 3)   // hsplit: handles multiple points
    U.resize(X.rows(),2);
    U.col(0) = fx * X.col(0).array() / X.col(2).array() + cx;
    U.col(1) = fy * X.col(1).array() / X.col(2).array() + cy;

    return;
}


//correct
void compute_J_skel_(Eigen::MatrixX3d& y, Eigen::MatrixXd& m_dof_per_y, Eigen::MatrixX3d& axis_per_dof, Eigen::MatrixX3d& pivot_per_dof, Eigen::MatrixXd& J_skel){
    // for each point, compute jacobian wrt all rotation dofs

    int aaa=y.rows(), bbb = pivot_per_dof.rows();

    Eigen::MatrixXd J_skel_rot(3*aaa,bbb);

    // #pragma omp parallel for
    for (int i=0;i<aaa*bbb;i++){
        Eigen::Vector3d temp = y.row(i/bbb) - pivot_per_dof.row(i%bbb);
        Eigen::Vector3d temp2 = axis_per_dof.row(i%bbb);
        J_skel_rot(Eigen::seq(i/bbb,3*aaa-1,aaa), i%bbb) = temp2.cross(temp);
    }

    //std::cout<<J_skel_rot<<std::endl<<std::endl<<std::endl<<std::endl;
    J_skel.resize(3*aaa, m_dof_per_y.cols());
    
    Eigen::MatrixX3d temp2 = Eigen::MatrixX3d::Zero(3*aaa,3);
    Eigen::VectorXd one_ = Eigen::VectorXd::Ones(aaa);
    temp2(Eigen::seq(0,aaa-1),0) = one_;
    temp2(Eigen::seq(aaa,2*aaa-1),1) = one_;
    temp2(Eigen::seq(2*aaa,3*aaa-1),2) = one_;
    J_skel(Eigen::placeholders::all,Eigen::seq(0,2)) = temp2;
    J_skel(Eigen::placeholders::all,Eigen::seq(3,25)) = J_skel_rot;

    //std::cout<<J_skel<<std::endl<<std::endl<<std::endl<<std::endl;

    // #pragma omp parallel for
    for (int i=1;i<4;i++){
        Eigen::MatrixXd p = J_skel(Eigen::seq((i-1)*aaa,i*aaa-1), Eigen::placeholders::all);
        J_skel(Eigen::seq((i-1)*aaa,i*aaa-1), Eigen::placeholders::all) = p.array()*m_dof_per_y.array();
    }

    //std::cout<<J_skel<<std::endl<<std::endl<<std::endl<<std::endl<<std::endl<<std::endl<<std::endl;

    return;
}  


void compute_J_persp(Eigen::MatrixX3d& x_bg, double fx, double fy, Eigen::MatrixXd& J_persp){
    int aaa = x_bg.rows();
    J_persp = Eigen::MatrixXd::Zero(aaa*2, 3);   // (|x|, 2, 3)
    Eigen::ArrayX3d x_bg_ = x_bg.array();
    Eigen::ArrayXd temp = x_bg_.col(2).cwiseInverse();
    Eigen::ArrayXd temp_sq = temp.square();
    J_persp(Eigen::seq(0,aaa-1), 0) = fx * temp;
    J_persp(Eigen::seq(aaa,2*aaa-1), 1) = fy * temp;
    J_persp(Eigen::seq(0,aaa-1), 2) = -fx * x_bg_.col(0) * temp_sq;
    J_persp(Eigen::seq(aaa,2*aaa-1), 2) = -fy * x_bg_.col(1) * temp_sq;
}


void furthest_point_downsample_ids(std::vector<Eigen::Vector3d>& D_, int n_S, std::vector<size_t>& S_ids, Eigen::Matrix3Xd& D){
    
    int n_D = D_.size(); 

    D.resize(3,n_D);

    // #pragma omp parallel for
    for (int i=0;i<n_D;i++){
        D.col(i) = D_[i];
    }

    S_ids = std::vector<size_t>(n_S,0);
    size_t curr_furthest_S_id = 0;
    Eigen::VectorXd to_D_min_dists = Eigen::VectorXd::Constant(n_D,1.0);
    Eigen::Vector3d s;
    int i=0;
    for(i=0;i<n_S;i++){
        S_ids[i] = curr_furthest_S_id;
        s = D.col(curr_furthest_S_id);
        Eigen::VectorXd s_to_D_dists = ((D).colwise() - s).colwise().squaredNorm();
        to_D_min_dists = to_D_min_dists.cwiseMin(s_to_D_dists);
        to_D_min_dists.maxCoeff(&curr_furthest_S_id);
    }

    return;
}




void compute_vertex_normals(Eigen::MatrixX3d& v ,Eigen::MatrixX3i& F, Eigen::MatrixX3d& n){

  Eigen::MatrixX3d v0 = v(F(Eigen::placeholders::all,0), Eigen::placeholders::all);
  Eigen::MatrixX3d v1 = v(F(Eigen::placeholders::all,1), Eigen::placeholders::all);
  Eigen::MatrixX3d v2 = v(F(Eigen::placeholders::all,2), Eigen::placeholders::all);

  Eigen::MatrixX3d e1 = v1-v0, e2 = v2-v0;



  Eigen::MatrixX3d n_F(e1.rows(),3);



  n_F.col(0) = e1.col(1).cwiseProduct(e2.col(2)) - e2.col(1).cwiseProduct(e1.col(2));
  n_F.col(1) = e2.col(0).cwiseProduct(e1.col(2)) - e1.col(0).cwiseProduct(e2.col(2));
  n_F.col(2) = e1.col(0).cwiseProduct(e2.col(1)) - e2.col(0).cwiseProduct(e1.col(1));


    n =  Eigen::MatrixX3d::Zero(v.rows(),3);
    for (size_t i = 0; i < F.rows(); i++) {
        Eigen::Vector3i triangle = F.row(i);
        n.row(triangle(0)) += n_F.row(i);
        n.row(triangle(1)) += n_F.row(i);
        n.row(triangle(2)) += n_F.row(i);
    }


  n.rowwise().normalize();


  return ;
}







void sample_face_ids(std::vector<Eigen::VectorXi>& i_f_per_part, Eigen::VectorXi& n_f_per_part, int n_f, int n_s_approx, Eigen::VectorXi& i_F_s){
    // for each part sample faces proportional to the number of faces belonging to this part
    Eigen::ArrayXi nn = (n_s_approx*n_f_per_part.array().cast<double>()/(1.0*n_f)).cast<int>();
    Eigen::ArrayXi cumsum(nn.size());

    partial_sum(nn.begin(), nn.end(), cumsum.begin(), std::plus<int>());

    int total = cumsum(Eigen::placeholders::last);
    i_F_s.resize(total);

    std::random_device rd;
    std::mt19937 gen(rd());


    std::uniform_int_distribution<> dis(0, i_f_per_part[0].size()-1);

    Eigen::VectorXi curr = i_f_per_part[0];

    std::shuffle(curr.data(), curr.data() + curr.size(), gen);

    i_F_s.segment(0,nn(0)) = curr.segment(0,nn(0));

    // #pragma omp parallel for
    for (int i=1;i<nn.size();i++){
        std::uniform_int_distribution<> dis(0, i_f_per_part[i].size()-1);
     
        Eigen::VectorXi curr = i_f_per_part[i];
 
        std::shuffle(curr.data(), curr.data() + curr.size(), gen);

        i_F_s.segment(cumsum(i-1),nn(i)) = curr.segment(0,nn(i));
 
    }

    // return;
}


void generate_random_barycentric_coordinates(int n_s, Eigen::MatrixX3d& b){
    // """generate random u, v, w for each triangle"""
    // Reference: Section 4.2 eq 1 in https://www.cs.princeton.edu/~funk/tog02.pdf
    
    
    Eigen::ArrayXd r1s = (Eigen::ArrayXd::Random(n_s)+1)/2;
    Eigen::ArrayXd r2s = (Eigen::ArrayXd::Random(n_s)+1)/2;
    /*
    if (n_s ==491){
        r1s<<0.28832799, 0.09771566, 0.74094445, 0.65067243, 0.60650809, 0.03404558,
 0.42946414 ,0.68520359, 0.15634665, 0.38565784 ,0.01983415, 0.081858,
 0.21645358 ,0.41465016, 0.46324004, 0.88452153 ,0.31665844, 0.02146388,
 0.82622335 ,0.06184694, 0.09299199, 0.96318172 ,0.75336542, 0.3378542,
 0.13217884 ,0.38673057, 0.33919489, 0.8744412  ,0.41875302, 0.08204501,
 0.9268052  ,0.62231336, 0.11670986, 0.11317416 ,0.46593324, 0.09208897,
 0.63175219 ,0.61638379, 0.03208135, 0.80742278 ,0.78679476, 0.91530827,
 0.67030665 ,0.69286223, 0.16374165, 0.02388881 ,0.06556315, 0.96446134,
 0.64572137 ,0.94690667, 0.34938436, 0.75522158 ,0.06539897, 0.16620517,
 0.27713333 ,0.55031825, 0.55740888, 0.49898645 ,0.42446358, 0.57570516,
 0.9666624  ,0.45807956, 0.83747142, 0.05587197 ,0.38558726, 0.56049644,
 0.62032056 ,0.25001834, 0.39929101, 0.94700617 ,0.64885075, 0.58496625,
 0.06529871 ,0.05217626, 0.21139845, 0.13782278 ,0.98374993, 0.00274715,
 0.36584353 ,0.05842245, 0.64001056, 0.0465332  ,0.06840964, 0.07994251,
 0.27178513 ,0.57635807, 0.80544862, 0.26719158 ,0.28317106, 0.82448214,
 0.74594838 ,0.12681475, 0.80634893, 0.83125111 ,0.17782578, 0.626948,
 0.19674362 ,0.24349271, 0.49400576, 0.52222003 ,0.47903352, 0.54114105,
 0.21316468 ,0.77858037, 0.27784841, 0.91268329 ,0.5151553 , 0.30368405,
 0.1743839  ,0.48520396, 0.3762973 , 0.62309379 ,0.49845958, 0.0369597,
 0.83309477 ,0.05167394, 0.82759516, 0.81274964 ,0.92398313, 0.66440104,
 0.16062363 ,0.44192941, 0.43943266, 0.63233299 ,0.38113753, 0.67567809,
 0.20390738 ,0.35335078, 0.54331341, 0.42765105 ,0.12252565, 0.96582812,
 0.6912954  ,0.83303508, 0.35746075, 0.94489591 ,0.8124471 , 0.97950625,
 0.19739425 ,0.47716948, 0.38584899, 0.613895   ,0.25021973, 0.10047229,
 0.47661659 ,0.63947194, 0.38401542, 0.98743934 ,0.40598877, 0.29981554,
 0.81389783 ,0.4666898 , 0.27321678, 0.28649102 ,0.94715579, 0.96173675,
 0.6462369  ,0.27876798, 0.71136904, 0.21676948 ,0.32208469, 0.54173636,
 0.40114416 ,0.35102386, 0.97413443, 0.17020617 ,0.61377856, 0.03854139,
 0.09171474 ,0.20999601, 0.9916862 , 0.72642464 ,0.8680381 , 0.04948378,
 0.68143845 ,0.43993648, 0.41641995, 0.70825479 ,0.30831895, 0.51346782,
 0.26072472 ,0.39140407, 0.53332618, 0.157881   ,0.27618712, 0.42040591,
 0.47274798 ,0.80000397, 0.64295011, 0.56249007 ,0.86986739, 0.19734886,
 0.10408304 ,0.39372521, 0.13718996, 0.55598104 ,0.57364333, 0.13159355,
 0.71605399 ,0.55653948, 0.42318199, 0.91748177 ,0.85591229, 0.22096916,
 0.16658318 ,0.9155364 , 0.15725189, 0.75720633 ,0.31251702, 0.36118535,
 0.55372465 ,0.92596417, 0.00205684, 0.16228733 ,0.72021178, 0.39446653,
 0.28781042 ,0.96289566, 0.26402842, 0.71416696 ,0.96422567, 0.76276606,
 0.70941404 ,0.72320671, 0.80522611, 0.27121365 ,0.62668673, 0.80288589,
 0.88822964 ,0.90583415, 0.90389639, 0.0976338  ,0.37640609, 0.45639208,
 0.8916854  ,0.41925362, 0.2649121 , 0.01985877 ,0.28875428, 0.78072418,
 0.02017094 ,0.16499393, 0.31096842, 0.53201107 ,0.36304332, 0.88263969,
 0.20747763 ,0.5616344 , 0.77781751, 0.92960823 ,0.87348027, 0.135521,
 0.79180008 ,0.67534627, 0.42160356, 0.0255671  ,0.16798147, 0.74946083,
 0.08400477 ,0.31264992, 0.25521244, 0.7461009  ,0.35905983, 0.08718824,
 0.3704421  ,0.32682988, 0.71702137, 0.32012222 ,0.69361565, 0.53859445,
 0.88773283 ,0.73336517, 0.40791874, 0.48490952 ,0.47138576, 0.8717024,
 0.13803617 ,0.42423001, 0.53491206, 0.43622283 ,0.59802847, 0.4988431,
 0.41369574 ,0.68681297, 0.32932247, 0.60690101 ,0.72855835, 0.13064664,
 0.3264521  ,0.94470456, 0.96602129, 0.99238876 ,0.04252583, 0.82650877,
 0.93527581 ,0.90194444, 0.7149413 , 0.67561934 ,0.71960662, 0.57488582,
 0.78842008 ,0.5019296 , 0.2259375 , 0.09434902 ,0.90825572, 0.75487898,
 0.17724194 ,0.82245828, 0.30034675, 0.63565497 ,0.35615286, 0.21416309,
 0.17560876 ,0.07095031, 0.07443856, 0.06909021 ,0.08991877, 0.83402929,
 0.51780833 ,0.12858401, 0.52499465, 0.5426298  ,0.49659203, 0.20648636,
 0.43439789 ,0.87085645, 0.38373548, 0.50398524 ,0.9302424 , 0.2328014,
 0.72550769 ,0.48384133, 0.78736791, 0.35967351 ,0.54235861, 0.36828594,
 0.86614924 ,0.91481789, 0.63182128, 0.98102024 ,0.73205568, 0.83042393,
 0.89472065 ,0.27190576, 0.98667793, 0.39041402 ,0.49721254, 0.18032373,
 0.82147879 ,0.33689763, 0.68934445, 0.21835559 ,0.35136306, 0.38424449,
 0.23662399 ,0.03506344, 0.77020892, 0.95035466 ,0.22624786, 0.16265136,
 0.34760418 ,0.082766  , 0.64973288, 0.36855252 ,0.56247855, 0.90584999,
 0.86157933 ,0.92167686, 0.93505772, 0.58981936 ,0.50230029, 0.03761517,
 0.10244131 ,0.52392339, 0.8560083 , 0.43263456 ,0.00372936, 0.21230311,
 0.75997042 ,0.15841799, 0.19957634, 0.28553606 ,0.60928338, 0.83640555,
 0.21889484 ,0.59946787, 0.52994061, 0.44486421 ,0.58042052, 0.81411852,
 0.21748806 ,0.49723415, 0.09792056, 0.51323756 ,0.79100786, 0.99855889,
 0.47569305 ,0.2966034 , 0.57950358, 0.37175205 ,0.11700239, 0.52449857,
 0.79913569 ,0.89112729, 0.97811119, 0.36772462 ,0.25166518, 0.11082077,
 0.43623192 ,0.80702716, 0.23464479, 0.8495665  ,0.71173702, 0.20094282,
 0.63175154 ,0.81969218, 0.93287037, 0.16221476 ,0.82201519, 0.77584909,
 0.24372164 ,0.29458141, 0.95708403, 0.36201606 ,0.28897611, 0.72001112,
 0.13290601 ,0.48316932, 0.35813313, 0.54398634 ,0.60325014, 0.64010745,
 0.43239906 ,0.88693241, 0.83567609, 0.93335779 ,0.44590564, 0.73008591,
 0.43069579 ,0.27878275, 0.65188645, 0.94598716 ,0.80430788, 0.28520177,
 0.22810576 ,0.77164546, 0.70512848, 0.86360175 ,0.14636161, 0.86167924,
 0.43262545 ,0.27334548, 0.34324466, 0.9935039  ,0.95603213, 0.08374604,
 0.31518847 ,0.71957902, 0.03532513, 0.03592365 ,0.04489029, 0.86844483,
 0.33373244 ,0.31873983, 0.79334382, 0.31856629 ,0.73843086, 0.36934073,
 0.29751931 ,0.38722651, 0.16803724, 0.07501115 ,0.87120145, 0.86838318,
 0.46082134 ,0.68837623, 0.86264962, 0.39072338 ,0.71181033, 0.75479142,
 0.07807461 ,0.13816207, 0.75032998, 0.70564894 ,0.18526748, 0.82673192,
 0.80090117 ,0.33274353, 0.340282  , 0.11057199 ,0.44548316;

    r2s<<0.10976126, 0.54340714, 0.62458332, 0.58194114, 0.07164854, 0.62167045,
 0.75221493, 0.14185321, 0.5950768  ,0.81905548, 0.19361944, 0.91341492,
 0.97191408, 0.71164456, 0.87203577 ,0.27178271, 0.66496839, 0.92614425,
 0.04472902, 0.82082454, 0.23692317 ,0.80111311, 0.64241954, 0.8015446,
 0.40099498, 0.45021605, 0.92429733 ,0.0712337 , 0.15620073, 0.97283241,
 0.91325131, 0.14686805, 0.97345922 ,0.26545543, 0.89210687, 0.90477523,
 0.02374579, 0.00971163, 0.32699486 ,0.93117848, 0.79134369, 0.38685098,
 0.85801081, 0.30756183, 0.3474174  ,0.19047832, 0.9595511 , 0.80363063,
 0.46242481, 0.26427657, 0.9659796  ,0.39681997, 0.21070556, 0.42465638,
 0.71912171, 0.7706848 , 0.10898555 ,0.94593077, 0.67457075, 0.06249576,
 0.83743644, 0.97190374, 0.83774764 ,0.00978488, 0.47308891, 0.58917377,
 0.88799869, 0.50276049, 0.07732382 ,0.93352551, 0.9517358 , 0.48616222,
 0.05344274, 0.83889068, 0.74167268 ,0.97123408, 0.00731369, 0.43549445,
 0.2838024 , 0.1077051 , 0.7351346  ,0.34121492, 0.03896914, 0.13362681,
 0.8060003 , 0.60587102, 0.21505063 ,0.69604223, 0.13040479, 0.67318776,
 0.65504026, 0.00552573, 0.51151547 ,0.72631543, 0.75853374, 0.70570834,
 0.88504561, 0.75620784, 0.9219899  ,0.414807  , 0.03416099, 0.18100342,
 0.28778228, 0.04179161, 0.10815954 ,0.51877912, 0.25248938, 0.28553513,
 0.74146953, 0.85467963, 0.86203981 ,0.3706216 , 0.70963007, 0.85230463,
 0.15095754, 0.20055367, 0.64796029 ,0.26555036, 0.19267715, 0.36752023,
 0.01598325, 0.43831928, 0.04726994 ,0.24471025, 0.2175422 , 0.32944523,
 0.12538996, 0.47119642, 0.68785664 ,0.33892892, 0.92719322, 0.85976688,
 0.30601514, 0.0389004 , 0.7681917  ,0.24001231, 0.33216104, 0.57933523,
 0.99887968, 0.29967757, 0.468523   ,0.62745088, 0.68337238, 0.21216618,
 0.59532175, 0.54410644, 0.65857986 ,0.11499698, 0.12629452, 0.97552749,
 0.82130156, 0.82755732, 0.93410441 ,0.96064776, 0.39348753, 0.75406718,
 0.64162009, 0.55985027, 0.67934838 ,0.31943345, 0.86217872, 0.40702233,
 0.14817869, 0.01098085, 0.63918933 ,0.23163169, 0.95606556, 0.19500446,
 0.31617941, 0.98413168, 0.51985462 ,0.9220246 , 0.78143767, 0.11896569,
 0.21598344, 0.38717756, 0.88095625 ,0.33398828, 0.46308204, 0.48076548,
 0.32475525, 0.78648528, 0.05482673 ,0.22591016, 0.82508521, 0.6163417,
 0.51182483, 0.36950796, 0.13013958 ,0.45678431, 0.98709448, 0.59508847,
 0.57657935, 0.99011858, 0.88540338 ,0.99919932, 0.95363334, 0.66749685,
 0.30531219, 0.62814318, 0.34820984 ,0.81076953, 0.13730046, 0.46254633,
 0.84077602, 0.45451209, 0.60101785 ,0.09828294, 0.28510498, 0.95448523,
 0.65693955, 0.36493917, 0.51688118 ,0.77486858, 0.78747035, 0.82796794,
 0.28964268, 0.23830594, 0.63850848 ,0.52720065, 0.56488675, 0.21461492,
 0.31862413, 0.75205318, 0.35832326 ,0.75748555, 0.04664466, 0.95086618,
 0.20807304, 0.47820763, 0.92088525 ,0.25347968, 0.22738427, 0.98564071,
 0.90443017, 0.5322462 , 0.06102195 ,0.60466871, 0.25157819, 0.21401048,
 0.93214304, 0.61942324, 0.44403952 ,0.06265886, 0.3716214 , 0.86398315,
 0.30267628, 0.32279427, 0.60685607 ,0.25214068, 0.55693476, 0.76868253,
 0.28667378, 0.47275087, 0.57626734 ,0.36333139, 0.22361837, 0.11440187,
 0.56548379, 0.93742922, 0.0187662  ,0.86566346, 0.96247311, 0.5423265,
 0.96788346, 0.70478244, 0.54522521 ,0.46367502, 0.46639901, 0.68199673,
 0.23450537, 0.71540112, 0.49098974 ,0.67466222, 0.94086175, 0.23345368,
 0.40322552, 0.27516013, 0.05267641 ,0.62208971, 0.62852002, 0.99941085,
 0.6010269 , 0.39610646, 0.90115872 ,0.01538432, 0.30270697, 0.75192905,
 0.16148701, 0.36123598, 0.84906364 ,0.34467465, 0.24296071, 0.89058827,
 0.07741721, 0.85669181, 0.31538462 ,0.20778472, 0.48787876, 0.48341811,
 0.96469699, 0.7525047 , 0.46012243 ,0.55944818, 0.31836827, 0.98272159,
 0.3859388 , 0.88568943, 0.65607719 ,0.91614407, 0.35456766, 0.41669643,
 0.36932696, 0.82704282, 0.95312277 ,0.82456933, 0.45142127, 0.82909673,
 0.73018637, 0.51913324, 0.18349501 ,0.23787093, 0.70376426, 0.19873941,
 0.56034598, 0.80418871, 0.65389808 ,0.60975572, 0.25773336, 0.11993597,
 0.03390985, 0.04634009, 0.23176246 ,0.55768268, 0.42368026, 0.20409893,
 0.30268714, 0.46125129, 0.79894223 ,0.65592915, 0.04090553, 0.481519,
 0.18599714, 0.85483287, 0.88490423 ,0.55466471, 0.73640804, 0.686781,
 0.81683487, 0.27881574, 0.22928831 ,0.74630906, 0.95908193, 0.22981782,
 0.56777398, 0.54421951, 0.37355822 ,0.75023779, 0.13176635, 0.37177707,
 0.43106723, 0.95299978, 0.68430379 ,0.71095888, 0.99979114, 0.22677871,
 0.60352663, 0.1076617 , 0.16249667 ,0.69612784, 0.82598343, 0.63579759,
 0.57978289, 0.79063073, 0.95623742 ,0.92552217, 0.80877701, 0.4321179,
 0.76633401, 0.23383231, 0.90404868 ,0.2797343 , 0.98038471, 0.30168325,
 0.26408328, 0.33632744, 0.4851419  ,0.20020064, 0.26372319, 0.88423657,
 0.93131982, 0.15537988, 0.44135123 ,0.41984641, 0.82828912, 0.66041395,
 0.40804168, 0.78869579, 0.60515099 ,0.2093611 , 0.79262816, 0.46563752,
 0.8869505 , 0.66522869, 0.15114611 ,0.7566757 , 0.58120575, 0.54157946,
 0.41973755, 0.66289024, 0.06328979 ,0.50383356, 0.93550672, 0.20486714,
 0.13701339, 0.41052034, 0.51951044 ,0.37652583, 0.48394103, 0.67466813,
 0.79277857, 0.05159149, 0.38171221 ,0.61923092, 0.02091566, 0.94919609,
 0.64082098, 0.48500367, 0.4483143  ,0.14725768, 0.066255  , 0.68096671,
 0.92398614, 0.7923685 , 0.02145433 ,0.03896848, 0.5126585 , 0.57326413,
 0.6063464 , 0.87602483, 0.89786579 ,0.98929443, 0.33363628, 0.46854387,
 0.99362931, 0.7003628 , 0.05743492 ,0.90955159, 0.61667274, 0.19371225,
 0.34772905, 0.57765929, 0.65276644 ,0.41072848, 0.7443591 , 0.53282653,
 0.97475781, 0.85349606, 0.15009654 ,0.10308769, 0.85352959, 0.60773067,
 0.97622357, 0.43583478, 0.17929837 ,0.03698835, 0.76858472, 0.08351793,
 0.64390315, 0.56354357, 0.73956832 ,0.94389126, 0.23652149, 0.48260409,
 0.75156207, 0.20235817, 0.09201162 ,0.13802299, 0.93168799, 0.7894252,
 0.20041085, 0.01588973, 0.63781901 ,0.32190688, 0.22795461, 0.19955564,
 0.47222536, 0.34225145, 0.94021729 ,0.56588748, 0.90012614;
    }





    if (n_s ==200){
        r1s<<3.35970263e-01, 9.60405600e-05, 2.12659524e-01, 2.89695375e-01,
 5.53104867e-01, 3.89451515e-01, 6.57671880e-01, 2.23942919e-01,
 4.68017285e-01, 2.24614454e-03, 6.86300398e-01, 8.65358765e-01,
 8.58657621e-01, 8.74683399e-01, 1.96131990e-01, 9.81421289e-01,
 5.51370056e-01, 1.85579790e-01, 9.10540625e-02, 7.09756771e-02,
 6.36967336e-01, 6.28587946e-01, 7.86757815e-01, 6.58614878e-01,
 5.19403606e-01, 1.62821646e-01, 7.34473847e-01, 4.06077918e-03,
 6.60305633e-01, 1.65310641e-01, 1.58812500e-01, 9.06091982e-01,
 9.27268799e-01, 7.20285414e-01, 2.28613275e-01, 4.69376372e-01,
 3.46198261e-01, 1.17604548e-01, 2.36816144e-01, 5.79688722e-02,
 9.72298939e-01, 2.36295183e-01, 3.87130303e-01, 2.46613038e-01,
 6.51256096e-01, 5.62529324e-01, 7.65665795e-01, 1.14169825e-02,
 2.04675351e-01, 5.98737728e-01, 5.76566930e-01, 8.24438556e-01,
 8.05468646e-02, 3.71152493e-01, 4.03756139e-01, 5.13026922e-01,
 3.51429219e-01, 7.34669791e-01, 1.04312669e-01, 6.06265488e-02,
 3.13496966e-01, 8.93683584e-02, 3.92411311e-01, 5.78430436e-01,
 8.41896336e-02, 4.59795889e-01, 5.55317638e-01, 5.64539286e-01,
 3.02027114e-02, 7.73234292e-01, 7.21994412e-01, 2.97011178e-01,
 4.71345430e-01, 7.39181879e-01, 8.34074731e-01, 2.47716418e-01,
 7.70832096e-01, 4.24198370e-01, 9.53160488e-01, 8.78365495e-01,
 3.57991523e-01, 3.59832514e-01, 4.85835861e-01, 9.60644797e-01,
 1.43980541e-01, 5.48901267e-01, 6.47710754e-01, 7.20055074e-01,
 6.71148507e-02, 5.99315318e-01, 4.50441034e-01, 3.39416893e-01,
 9.70535745e-01, 1.06029122e-01, 7.08691782e-01, 2.04360462e-01,
 9.48102289e-01, 5.00314559e-01, 4.53387591e-01, 2.48501680e-01,
 5.33779392e-01, 8.64328956e-01, 7.20732812e-02, 6.58226502e-01,
 1.46554387e-01, 2.25070474e-01, 8.53852498e-01, 7.22715630e-02,
 7.31670883e-01, 5.78531238e-02, 5.09543276e-01, 6.23507988e-01,
 1.46998537e-01, 8.02109594e-01, 2.21010780e-01, 4.75682486e-01,
 2.40281211e-01, 7.63585922e-01, 2.51141320e-01, 2.62182599e-01,
 1.21767768e-02, 8.99837598e-01, 3.35969628e-02, 3.14586448e-01,
 6.47007162e-01, 3.32085734e-01, 5.97206100e-01, 3.64564873e-01,
 8.79951123e-01, 1.58979216e-01, 1.84104312e-02, 9.97000037e-02,
 5.23992037e-01, 5.92268700e-01, 8.33902818e-01, 9.54647982e-01,
 4.01304425e-01, 8.23695174e-01, 4.05169747e-01, 3.70657024e-01,
 1.32694288e-01, 8.68653384e-01, 3.36107264e-01, 6.46691101e-01,
 5.17165479e-01, 9.96837525e-01, 2.55633982e-01, 5.51498646e-01,
 7.89632257e-01, 1.91081000e-01, 8.23173801e-01, 5.58169732e-01,
 1.03519069e-01, 9.68056767e-01, 4.11851566e-01, 4.75406183e-01,
 7.84462283e-01, 9.64637292e-01, 2.45538526e-01, 1.36165488e-01,
 7.44730895e-01, 6.77037508e-01, 4.46520543e-01, 6.47606899e-01,
 9.44149981e-01, 8.41910978e-01, 5.68219713e-01, 9.08626769e-01,
 9.12911472e-01, 7.71155623e-01, 1.18560956e-01, 5.61708921e-01,
 6.07266889e-01, 8.79334787e-01, 5.16229899e-01, 6.12589776e-01,
 7.15163894e-01, 8.38712937e-02, 5.63429437e-02, 3.03978264e-02,
 1.06835463e-01, 2.55484146e-01, 4.83867910e-02, 5.96446343e-01,
 5.72289184e-01, 4.55291459e-01, 8.94935364e-03, 5.19182761e-01,
 1.26368623e-01, 5.10567955e-03, 7.96227390e-01, 9.10653011e-01,
 7.23200974e-02, 6.58998150e-01, 5.32868940e-02, 5.82188756e-01,
 6.23911631e-01, 5.86752020e-01, 9.90300107e-01, 6.13651353e-01;



r2s<<0.16613346, 0.93281091, 0.29901133, 0.53942603, 0.43251218, 0.80673886,
 0.08400305, 0.36761298, 0.44271554, 0.59741383, 0.90790792, 0.30149814,
 0.34553669, 0.67200613, 0.20895742, 0.50988253, 0.31972107, 0.6237501,
 0.58056939, 0.68591069, 0.42969628, 0.23364639, 0.01461753, 0.60159843,
 0.2248147 , 0.00482628, 0.37502874, 0.27413178, 0.68273606, 0.29779484,
 0.36765987, 0.72391271, 0.6741544 , 0.16073126, 0.58681155, 0.93283418,
 0.90935193, 0.8493826 , 0.28201357, 0.95958914, 0.1996495 , 0.40188013,
 0.11413416, 0.56561133, 0.72265224, 0.68763408, 0.00718758, 0.9824687,
 0.3100098 , 0.74138526, 0.92660264, 0.78016692, 0.52324044, 0.53865867,
 0.14377322, 0.38207296, 0.82250198, 0.6811835 , 0.66352334, 0.68143043,
 0.34954179, 0.98020304, 0.33629828, 0.18713037, 0.66871814, 0.16919201,
 0.97527313, 0.57552173, 0.12014174, 0.02361851, 0.60120621, 0.04214951,
 0.05244293, 0.41244283, 0.44828902, 0.82896261, 0.12939516, 0.8683324,
 0.40500212, 0.85298028, 0.15134593, 0.04806967, 0.43582599, 0.21565299,
 0.47825274, 0.82019648, 0.88542878, 0.08681483, 0.25708986, 0.30486087,
 0.17436757, 0.46702843, 0.05358611, 0.19727886, 0.06512839, 0.45693248,
 0.93998791, 0.15313315, 0.88714181, 0.31576444, 0.74713062, 0.84262677,
 0.60504219, 0.71925569, 0.6321211 , 0.93058444, 0.7787374 , 0.42026214,
 0.29094952, 0.15683466, 0.5121338 , 0.22913687, 0.23485721, 0.88204841,
 0.699746  , 0.53946463, 0.84313267, 0.52538051, 0.39442935, 0.68550711,
 0.60878804, 0.20850785, 0.31858113, 0.56098793, 0.21864138, 0.91688292,
 0.04430292, 0.87636185, 0.97991389, 0.61524025, 0.21189462, 0.80975447,
 0.44133419, 0.71244863, 0.32266524, 0.22145147, 0.95423818, 0.07574716,
 0.05808901, 0.78278091, 0.77550351, 0.31147607, 0.3740592 , 0.68792685,
 0.59979514, 0.64847839, 0.4353325 , 0.98024328, 0.14798795, 0.63173851,
 0.20611238, 0.33485881, 0.29752404, 0.82513329, 0.57994057, 0.33079311,
 0.5355833 , 0.46123908, 0.54413779, 0.23754141, 0.37406251, 0.45841778,
 0.08319454, 0.01434395, 0.59363574, 0.20706998, 0.80218156, 0.02505906,
 0.22320352, 0.62986787, 0.13199751, 0.42070878, 0.29827486, 0.26853078,
 0.23490988, 0.97594231, 0.31966532, 0.11787531, 0.9152368 , 0.1583505,
 0.73669847, 0.65882368, 0.7176553 , 0.77335469, 0.18030301, 0.03730338,
 0.43073302, 0.44488007, 0.23661744, 0.81001345, 0.10902221, 0.49750992,
 0.52846515, 0.00936093, 0.81090554, 0.35817948, 0.45804395, 0.1608264,
 0.39910634, 0.45252869;
    }*/

    b.resize(n_s,3);
    Eigen::ArrayXd sqrt = r1s.sqrt();
    b.col(0) = 1 - sqrt;
    b.col(1) = sqrt * (1 - r2s);
    b.col(2) = sqrt * r2s;

}


//correct
void barycenters_to_mesh_positions(Eigen::MatrixX3d& b, Eigen::VectorXi& i_Fb, Eigen::MatrixX3d& v, Eigen::MatrixX3i& F, Eigen::MatrixX3d& pb){
    pb = v(F(i_Fb, 0), Eigen::placeholders::all).array().colwise() * b.col(0).array() 
    + v(F(i_Fb, 1), Eigen::placeholders::all).array().colwise() * b.col(1).array() 
    + v(F(i_Fb, 2), Eigen::placeholders::all).array().colwise() * b.col(2).array();
    return;
}


void barycenters_to_mesh_normals(Eigen::MatrixX3d& b, Eigen::VectorXi& i_Fb, Eigen::MatrixX3d& n, Eigen::MatrixX3i& F, Eigen::MatrixX3d& nb){
    nb = n(F(i_Fb, 0), Eigen::placeholders::all).array().colwise() * b.col(0).array() + n(F(i_Fb, 1), Eigen::placeholders::all).array().colwise() * b.col(1).array() + n(F(i_Fb, 2), Eigen::placeholders::all).array().colwise() * b.col(2).array();
    nb.rowwise().normalize();
    return;
}

